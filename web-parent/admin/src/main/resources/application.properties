#服务端口
server.port=8081
server.servlet.context-path=/
#声明服务名称
spring.application.name=admin
#注明自己的服务注册中心的地址
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
#允许同名实体注册
spring.main.allow-bean-definition-overriding=true

#log4j2配置
logging.config=classpath:log4j2-dev.xml

#redis配置
spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password=hi,coder
## 连接超时时间（毫秒）
spring.redis.timeout=1200
# redis连接池配置【使用Lettuce 】
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0

#消费端开启服务熔断机制
feign.hystrix.enabled=true
#熔断器失败的个数==进入熔断器的请求达到1000时服务降级（之后的请求直接进入熔断器）
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=1000
##回退最大线程数
#hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=50
##核心线程池数量
#hystrix.threadpool.default.coreSize=130
#断路器超时时间，默认1000ms
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
######Ribbon相关配置
#ribbon请求连接的超时时间，默认值2000
ribbon.ConnectTimeout=2000
#负载均衡超时时间，默认值5000
ribbon.ReadTimeout=3000
# 对所有请求都进行重试 如果不配置ribbon的重试次数，默认会重试一次
# OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。如果设置为true，便会对所有的请求进行重试，
# 如果是put或post等写操作，如果服务器接口没做幂等性，会产生不好的结果，
ribbon.OkToRetryOnAllOperations=false
#切换实例的重试次数
ribbon.MaxAutoRetriesNextServer=2
#对当前实例的重试次数
ribbon.MaxAutoRetries=1

#预加载相应的微服务，避免第一次连接超时
ribbon.eager-load.enabled=true
ribbon.eager-load.clients=portal-server

# 添加访问路径
distressed.asset.file.manager.url=http://localhost:8086
# 显示文件路径
distressed.asset.file.manager.show=http://localhost:8086/file/show/
# shiro记住登陆状态cookie密钥
distressed.asset.shiro.cookie.key=egTUTBXUZERJh1tD941smw==














